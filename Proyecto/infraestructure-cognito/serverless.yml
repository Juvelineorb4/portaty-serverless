service: portaty-infraestructure-cognito
app: portaty-professions
org: juvelineorb4

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    EJEMPLO: "EJEMPLO"
    COGNITO_USER_POOL_NAME: "${self:custom.user_pool_name.${opt:stage, self:provider.stage}}"
    COGNITO_USER_POOL_ARN:
      Fn::GetAtt: [CognitoUserPool, Arn]
    COGNITO_USER_POOL_ID:
      Ref: CognitoUserPool
    # COGNITO_IDENTITY_POOL_ID:
    #   Ref: CognitoIdentityPool
    S3_BUCKET_ARN: "${self:custom.s3_bucket_arn.${opt:stage, self:provider.stage}}"
    FIREHOSE_ARN: "${self:custom.firehose_arn.${opt:stage, self:provider.stage}}"
    APPSYNC_ARN: "${self:custom.appsync_arn.${opt:stage, self:provider.stage}}"
    GOOGLE_CLIENT_ID: "${self:custom.google_client_id.${opt:stage, self:provider.stage}}"
    GOOGLE_CLIENT_SECRET: "${self:custom.google_client_secret.${opt:stage, self:provider.stage}}"
    OLD_COGNITO_USER_POOL_ID: "${self:custom.old_cognito_user_pool_id.${opt:stage, self:provider.stage}}"
    OLD_COGNITO_USER_POOL_CLIENT_ID: "${self:custom.old_cognito_user_pool_client_id.${opt:stage, self:provider.stage}}"
    OLD_COGNITO_USER_POOL_ARN: "${self:custom.old_cognito_user_pool_arn.${opt:stage, self:provider.stage}}"
    # AUTH_ROLE_ARN:
    #   Fn::GetAtt: [CognitoAuthRole, Arn]
    # UNAUTH_ROLE_ARN:
    #   Fn::GetAtt: [CognitoUnauthRole, Arn]

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "cognito-idp:AdminGetUser"
            - "cognito-idp:AdminInitiateAuth"
            - "cognito-idp:AdminCreateUser"
            - "cognito-idp:AdminSetUserPassword"
          Resource:
            - ${self:provider.environment.COGNITO_USER_POOL_ARN}
            - ${self:provider.environment.OLD_COGNITO_USER_POOL_ARN}

custom:
  user_pool_name:
    dev: portaty-dev
    prod: portaty-prod
  appsync_arn:
    dev: arn:aws:appsync:us-east-1:086563672363:apis/ehid2xtqobf75gakml3qgdj45m
    prod: arn:aws:appsync:us-east-1:086563672363:apis/3phqsjzznfdxlnjnzszwzb6rjy
  appsync_id:
    dev: ehid2xtqobf75gakml3qgdj45m
    prod: 3phqsjzznfdxlnjnzszwzb6rjy
  s3_bucket_arn:
    dev: arn:aws:s3:::s3professions202858-dev
    prod: arn:aws:s3:::s3professions143312-prod
  firehose_arn:
    dev: arn:aws:firehose:us-east-1:086563672363:deliverystream/portaty-dev-stream
    prod: arn:aws:firehose:us-east-1:086563672363:deliverystream/portaty-prod-stream
  google_client_id:
    dev: 937865933585-u70muhp3nuq8qpqkqv07cd5hgm6tarlj.apps.googleusercontent.com
    prod: ""
  google_client_secret:
    dev: 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
    prod: ""
  old_cognito_user_pool_id:
    dev: "us-east-1_Mr2xjl1Hg"
    prod: "us-east-1_aiv5jx4kp"
  old_cognito_user_pool_arn:
    dev: "arn:aws:cognito-idp:us-east-1:086563672363:userpool/us-east-1_Mr2xjl1Hg"
    prod: "arn:aws:cognito-idp:us-east-1:086563672363:userpool/us-east-1_aiv5jx4kp"
  old_cognito_user_pool_client_id:
    dev: "2tlmib17h4hrvampjlbl915jp9"
    prod: ""

functions:
  userMigration:
    handler: functions/userMigration.handler
    events:
      - cognitoUserPool:
          pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
          trigger: UserMigration
          existing: true

  preSignUp:
    handler: functions/preSignUp.handler
    events:
      - cognitoUserPool:
          pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
          trigger: PreSignUp
          existing: true

  postConfirmation:
    handler: functions/postConfirmation.handler
    events:
      - cognitoUserPool:
          pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
          trigger: PostConfirmation
          existing: true

  preAuth:
    handler: functions/preAuth.handler
    events:
      - cognitoUserPool:
          pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
          trigger: PreAuthentication
          existing: true

  postAuth:
    handler: functions/postAuth.handler
    events:
      - cognitoUserPool:
          pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
          trigger: PostAuthentication
          existing: true

# preTokenGeneration:
#   handler: functions/preTokenGeneration.handler
#   events:
#     - cognitoUserPool:
#         pool: ${self:provider.environment.COGNITO_USER_POOL_NAME}
#         trigger: PreTokenGeneration
#         existing: true

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.environment.COGNITO_USER_POOL_NAME}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: gender
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: identityID
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: lastLocation
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: lastName
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: notificationToken
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: requestDeleting
            AttributeDataType: Boolean
            Required: false
            Mutable: true
          - Name: userTableID
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: oldSub
            AttributeDataType: String
            Required: false
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: false
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Priority: 1
              Name: verified_email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH

        GenerateSecret: false
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthFlowsUserPoolClient: true # Esto es crucial para permitir OAuth en el App Client
        AllowedOAuthScopes:
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        SupportedIdentityProviders: # Habilitar IdP expl√≠citamente
          - COGNITO # IdP nativo de Cognito
          - Google # Habilitar Google como IdP
        CallbackURLs:
          - exp://192.168.2.21:8081/
        LogoutURLs:
          - exp://192.168.2.21:8081/

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: portaty-${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool

    # CognitoIdentityPool:
    #   Type: AWS::Cognito::IdentityPool
    #   Properties:
    #     IdentityPoolName: portaty-${self:provider.stage}-identity-pool1
    #     AllowUnauthenticatedIdentities: true
    #     CognitoIdentityProviders:
    #       - ClientId:
    #           Ref: CognitoUserPoolClient
    #         ProviderName:
    #           Fn::Sub: "cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}"
    #     SupportedLoginProviders:
    #       accounts.google.com: ${self:provider.environment.GOOGLE_CLIENT_ID}

    # CognitoAuthRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: portaty-${self:provider.stage}-authRole
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Federated: "cognito-identity.amazonaws.com"
    #           Action: "sts:AssumeRoleWithWebIdentity"
    #           Condition:
    #             StringEquals:
    #               cognito-identity.amazonaws.com:aud:
    #                 Ref: CognitoIdentityPool
    #             "ForAnyValue:StringLike":
    #               cognito-identity.amazonaws.com:amr: authenticated
    #     Policies:
    #       - PolicyName: AuthAccessS3Private
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - "s3:PutObject"
    #                 - "s3:GetObject"
    #                 - "s3:DeleteObject"
    #               Resource:
    #                 - Fn::Sub:
    #                     - "${BucketArn}/private/$${CognitoSub}/*"
    #                     - BucketArn: ${self:provider.environment.S3_BUCKET_ARN}
    #                       CognitoSub: "{cognito-identity.amazonaws.com:sub}"

    #       - PolicyName: AuthAccessS3Protected
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - "s3:PutObject"
    #                 - "s3:GetObject"
    #                 - "s3:DeleteObject"
    #               Resource:
    #                 - Fn::Sub:
    #                     - "${BucketArn}/protected/$${CognitoSub}/*"
    #                     - BucketArn: ${self:provider.environment.S3_BUCKET_ARN}
    #                       CognitoSub: "{cognito-identity.amazonaws.com:sub}"

    #       - PolicyName: AuthAccessS3Public
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - "s3:PutObject"
    #                 - "s3:GetObject"
    #                 - "s3:DeleteObject"
    #               Resource:
    #                 - "${self:provider.environment.S3_BUCKET_ARN}/public/*"

    #       - PolicyName: AuthAccessS3Read
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action: "s3:GetObject"
    #               Resource:
    #                 - "${self:provider.environment.S3_BUCKET_ARN}/protected/*"
    #             - Effect: Allow
    #               Action: "s3:ListBucket"
    #               Condition:
    #                 StringLike:
    #                   "s3:prefix":
    #                     - "public/"
    #                     - "public/*"
    #                     - "protected/"
    #                     - "protected/*"
    #                     - Fn::Sub:
    #                         - "private/$${CognitoSub}/"
    #                         - CognitoSub: "{cognito-identity.amazonaws.com:sub}"
    #                     - Fn::Sub:
    #                         - "private/$${CognitoSub}/"
    #                         - CognitoSub: "{cognito-identity.amazonaws.com:sub}/*"
    #               Resource: "${self:provider.environment.S3_BUCKET_ARN}"

    #       - PolicyName: AuthAccessS3Uploads
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action: "s3:PutObject"
    #               Resource:
    #                 - "${self:provider.environment.S3_BUCKET_ARN}/uploads/*"
    #         # Nueva pol√≠tica para Kinesis Firehose
    #       - PolicyName: AuthAccessFirehose
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Sid: "VisualEditor0"
    #               Effect: "Allow"
    #               Action:
    #                 - "firehose:PutRecord"
    #                 - "firehose:PutRecordBatch"
    #               Resource:
    #                 - ${self:provider.environment.FIREHOSE_ARN}
    #             - Sid: "VisualEditor1"
    #               Effect: "Allow"
    #               Action: "firehose:ListDeliveryStreams"
    #               Resource: "*"
    #       - PolicyName: AuthAccessAppSync
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Sid: "VisualEditor0"
    #               Effect: "Allow"
    #               Action:
    #                 - "appsync:GraphQL"
    #               Resource:
    #                 - ${self:provider.environment.APPSYNC_ARN}/types/*
    # CognitoUnauthRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: portaty-${self:provider.stage}-unauthRole
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Federated: "cognito-identity.amazonaws.com"
    #           Action: "sts:AssumeRoleWithWebIdentity"
    #           Condition:
    #             StringEquals:
    #               cognito-identity.amazonaws.com:aud:
    #                 Ref: CognitoIdentityPool
    #             "ForAnyValue:StringLike":
    #               cognito-identity.amazonaws.com:amr: unauthenticated
    #     Policies:
    #       - PolicyName: UnAuthAccessFirehose
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Sid: "VisualEditor0"
    #               Effect: "Allow"
    #               Action:
    #                 - "firehose:PutRecord"
    #                 - "firehose:PutRecordBatch"
    #               Resource:
    #                 - ${self:provider.environment.FIREHOSE_ARN}
    #             - Sid: "VisualEditor1"
    #               Effect: "Allow"
    #               Action: "firehose:ListDeliveryStreams"
    #               Resource: "*"
    #       - PolicyName: UnAuthAccessS3Public
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - "s3:GetObject"
    #               Resource:
    #                 - "${self:provider.environment.S3_BUCKET_ARN}/public/*"
    #       - PolicyName: UnAuthAccessS3Read
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action: "s3:GetObject"
    #               Resource:
    #                 - "${self:provider.environment.S3_BUCKET_ARN}/protected/*"
    #             - Effect: Allow
    #               Action: "s3:ListBucket"
    #               Condition:
    #                 StringLike:
    #                   "s3:prefix":
    #                     - "public/"
    #                     - "public/*"
    #                     - "protected/"
    #                     - "protected/*"
    #               Resource: "${self:provider.environment.S3_BUCKET_ARN}"
    #       - PolicyName: UnAuthAccessAppSync
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Sid: "VisualEditor0"
    #               Effect: "Allow"
    #               Action:
    #                 - "appsync:GraphQL"
    #               Resource:
    #                 - ${self:provider.environment.APPSYNC_ARN}/types/*

    # CognitoIdentityPoolRoleAttachment:
    #   Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    #   Properties:
    #     IdentityPoolId:
    #       Ref: CognitoIdentityPool
    #     Roles:
    #       authenticated:
    #         Fn::GetAtt: [CognitoAuthRole, Arn]
    #       unauthenticated:
    #         Fn::GetAtt: [CognitoUnauthRole, Arn]

    CognitoGoogleIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        ProviderName: Google
        ProviderType: Google
        ProviderDetails:
          client_id: ${self:provider.environment.GOOGLE_CLIENT_ID}
          client_secret: ${self:provider.environment.GOOGLE_CLIENT_SECRET}
          authorize_scopes: "openid profile email"
        AttributeMapping:
          email: email

    # UpdateRolesWithIDPFunction:
    #   Type: AWS::Lambda::Function
    #   DependsOn:
    #     - CognitoUnauthRole
    #     - CognitoAuthRole
    #   Properties:
    #     Code:
    #       ZipFile: |
    #         const response = require('cfn-response');
    #         const { IAMClient, GetRoleCommand, UpdateAssumeRolePolicyCommand } = require('@aws-sdk/client-iam');
    #         exports.handler = function(event, context) {
    #             // Don't return promise, response.send() marks context as done internally
    #             const ignoredPromise = handleEvent(event, context);
    #         };
    #         async function handleEvent(event, context) {
    #             try {
    #                 let authRoleName = event.ResourceProperties.authRoleName;
    #                 let unauthRoleName = event.ResourceProperties.unauthRoleName;
    #                 let idpId = event.ResourceProperties.idpId;
    #                 let authParamsJson = {
    #                     'Version': '2012-10-17',
    #                     'Statement': [{
    #                         'Effect': 'Allow',
    #                         'Principal': {'Federated': 'cognito-identity.amazonaws.com'},
    #                         'Action': 'sts:AssumeRoleWithWebIdentity',
    #                         'Condition': {
    #                             'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},
    #                             'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}
    #                         }
    #                     }]
    #                 };
    #                 let unauthParamsJson = {
    #                     'Version': '2012-10-17',
    #                     'Statement': [{
    #                         'Effect': 'Allow',
    #                         'Principal': {'Federated': 'cognito-identity.amazonaws.com'},
    #                         'Action': 'sts:AssumeRoleWithWebIdentity',
    #                         'Condition': {
    #                             'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},
    #                             'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}
    #                         }
    #                     }]
    #                 };
    #                 if (event.RequestType === 'Delete') {
    #                     try {
    #                         delete authParamsJson.Statement[0].Condition;
    #                         delete unauthParamsJson.Statement[0].Condition;
    #                         authParamsJson.Statement[0].Effect = 'Deny';
    #                         unauthParamsJson.Statement[0].Effect = 'Deny';
    #                         let authParams = {PolicyDocument: JSON.stringify(authParamsJson), RoleName: authRoleName};
    #                         let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson), RoleName: unauthRoleName};
    #                         const iam = new IAMClient({region: event.ResourceProperties.region});
    #                         let res = await Promise.all([
    #                             iam.send(new GetRoleCommand({RoleName: authParams.RoleName})),
    #                             iam.send(new GetRoleCommand({RoleName: unauthParams.RoleName}))
    #                         ]);
    #                         res = await Promise.all([
    #                             iam.send(new UpdateAssumeRolePolicyCommand(authParams)),
    #                             iam.send(new UpdateAssumeRolePolicyCommand(unauthParams))
    #                         ]);
    #                         response.send(event, context, response.SUCCESS, {});
    #                     } catch (err) {
    #                         console.log(err.stack);
    #                         response.send(event, context, response.SUCCESS, {Error: err});
    #                     }
    #                 } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {
    #                     const iam = new IAMClient({region: event.ResourceProperties.region});
    #                     let authParams = {PolicyDocument: JSON.stringify(authParamsJson), RoleName: authRoleName};
    #                     let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson), RoleName: unauthRoleName};
    #                     const res = await Promise.all([
    #                         iam.send(new UpdateAssumeRolePolicyCommand(authParams)),
    #                         iam.send(new UpdateAssumeRolePolicyCommand(unauthParams))
    #                     ]);
    #                     response.send(event, context, response.SUCCESS, {});
    #                 }
    #             } catch (err) {
    #                 console.log(err.stack);
    #                 response.send(event, context, response.FAILED, {Error: err});
    #             }
    #         }
    #     Handler: index.handler
    #     Runtime: nodejs18.x
    #     Timeout: 300
    #     Role:
    #       Fn::GetAtt:
    #         - UpdateRolesWithIDPFunctionRole
    #         - Arn

    # # 6. Lambda Role
    # UpdateRolesWithIDPFunctionRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: portaty-updateRolesWithIDPFunctionRole-${self:provider.stage}
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service: lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: portaty-updateRolesWithIDPPolicy-${self:provider.stage}
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - iam:GetRole
    #                 - iam:UpdateAssumeRolePolicy
    #               Resource:
    #                 - "${self:provider.environment.AUTH_ROLE_ARN}"
    #                 - "${self:provider.environment.UNAUTH_ROLE_ARN}"

    # UpdateRolesWithIDPFunctionOutputs:
    #   Type: Custom::LambdaCallout
    #   Properties:
    #     ServiceToken:
    #       Fn::GetAtt:
    #         - UpdateRolesWithIDPFunction
    #         - Arn
    #     region:
    #       Ref: AWS::Region
    #     idpId:
    #       Ref: CognitoIdentityPool
    #     authRoleName:
    #       Ref: CognitoAuthRole
    #     unauthRoleName:
    #       Ref: CognitoUnauthRole

  Outputs:
    CognitoUserPoolId:
      Description: "ID del Cognito User Pool"
      Value:
        Ref: CognitoUserPool

    CognitoUserPoolArn:
      Description: "ARN del Cognito User Pool"
      Value:
        Fn::GetAtt: [CognitoUserPool, Arn]

    CognitoUserPoolClientId:
      Description: "ID del Cognito User Pool Client"
      Value:
        Ref: CognitoUserPoolClient

    CognitoUserPoolDomain:
      Description: "Dominio del Cognito User Pool"
      Value:
        Ref: CognitoUserPoolDomain

    # CognitoIdentityPoolId:
    #   Description: "ID del Cognito Identity Pool"
    #   Value:
    #     Ref: CognitoIdentityPool
