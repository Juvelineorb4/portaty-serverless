service: portatyv2
app: portaty-professions
org: juvelineorb4

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    "SQS_OPENSE_NAME": "${self:custom.sqs_opense_name.${opt:stage, self:provider.stage}}"
    "SQS_DLQ_NAME": "${self:custom.sqs_dlq_name.${opt:stage, self:provider.stage}}"
    "TOPIC_OPENSE_NAME": "${self:custom.topic_opense_name.${opt:stage, self:provider.stage}}"
    "TOPIC_SEND_EMAIL_BUSINESS_NAME": "${self:custom.sqs_email_business_name.${opt:stage, self:provider.stage}}"
    "TOPIC_TRIGGER_BUSINESS": "${self:custom.topic_trigger_business.${opt:stage, self:provider.stage}}"
    "SNS_TOPIC_ARN": ${cf:portatyv2-${self:provider.stage}.TOPICTriggerBusinessArn}
    "SNS_TOPIC_OPENSEARCH_ARN": ${cf:portatyv2-${self:provider.stage}.TOPICOpenseSyncArn}
    "OPENSEARCH_ARN": "arn:aws:es:us-east-1:086563672363:domain/portaty-opense"
    "OPENSEARCH_ENDPOINT": "https://search-portaty-opense-f2pru5qxiz73a53c7fstafplnu.us-east-1.es.amazonaws.com"
    "OPENSEARCH_REGION": "us-east-1"
    "OPENSE_INDEX": "${self:custom.opense_index.${opt:stage, self:provider.stage}}"
    "TABLE_BUSINESS_STREAM": "${self:custom.table_business_stream.${opt:stage, self:provider.stage}}"
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sns:*"
            - "es:*"
            - "lambda:InvokeFunction" # Permiso para invocar otras funciones Lambda
          Resource:
            - ${self:provider.environment.SNS_TOPIC_ARN}
            - ${self:provider.environment.SNS_TOPIC_OPENSEARCH_ARN}
            - ${self:provider.environment.OPENSEARCH_ARN}/*

custom:
  opense_index:
    dev: "business_dev"
    prod: "business"
  table_business_stream:
    dev: "arn:aws:dynamodb:us-east-1:086563672363:table/Business-ehid2xtqobf75gakml3qgdj45m-dev/stream/2023-08-11T20:44:59.902"
    prod: "arn:aws:dynamodb:us-east-1:086563672363:table/Business-3phqsjzznfdxlnjnzszwzb6rjy-prod/stream/2024-04-06T19:25:12.916"
  sqs_opense_name:
    dev: "SQSOpenseSyncdev"
    prod: "SQSOpenseSync"
  sqs_dlq_name:
    dev: "SQSOpenseSyncDLQdev"
    prod: "SQSOpenseSyncDLQ"
  topic_opense_name:
    dev: "TopicOpenseSyncdev"
    prod: "TopicOpenseSync"
  sqs_email_business_name:
    dev: "SQSSendEmailBusinessdev"
    prod: "SQSSendEmailBusiness"
  topic_trigger_business:
    dev: "TOPICTriggerBusinessdev"
    prod: "TOPICTriggerBusiness"

functions:
  test:
    handler: handler.hello
    events:
      - http:
          path: test
          method: get
  triggerBusiness:
    handler: functions/triggerBusiness.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:provider.environment.TABLE_BUSINESS_STREAM}
  sendEmailBusiness:
    handler: functions/sendEmailBusiness.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSSendEmailBusiness
              - Arn
  openSearchBusinessSync:
    handler: functions/openSearchBusinessSync.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSOpenseSync
              - Arn
    layers:
      - arn:aws:lambda:us-east-1:086563672363:layer:openSearchBusinessSync:3

resources:
  Resources:
    # ***********OPENSE SYNC************
    # SQS
    SQSOpenseSync:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.SQS_OPENSE_NAME}.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - SQSOpenseSyncDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    SQSOpenseSyncDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.SQS_DLQ_NAME}.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
    # SNS
    TopicOpenseSync:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "${self:provider.environment.TOPIC_OPENSE_NAME}.fifo"
        FifoTopic: true
        ContentBasedDeduplication: true
    # # SUBSCRIOTION SQS
    SQSOpenseSyncSubs:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn:
          Fn::Join:
            - ":"
            - - "arn:aws:sns"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "${self:provider.environment.TOPIC_OPENSE_NAME}.fifo"
        Endpoint:
          Fn::GetAtt:
            - SQSOpenseSync
            - Arn
        Protocol: sqs
        RawMessageDelivery: true

    # # Policy SNS
    # # Policy SNS
    TopicToSQSOpenseSyncPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: "Allow"
              Principal:
                Service:
                  - "sns.amazonaws.com"
              Resource:
                Fn::GetAtt:
                  - SQSOpenseSync
                  - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: TopicOpenseSync
        Queues:
          - "${self:provider.environment.SQS_OPENSE_NAME}.fifo"
    # # ***************SEND EMAIL*********************
    # # SQS
    SQSSendEmailBusiness:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "${self:provider.environment.TOPIC_SEND_EMAIL_BUSINESS_NAME}"
    # # TOPIC
    TOPICTriggerBusiness:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "${self:provider.environment.TOPIC_TRIGGER_BUSINESS}"
        Subscription:
          - Protocol: sqs
            Endpoint:
              Fn::GetAtt:
                - SQSSendEmailBusiness
                - Arn
    # # POLICY
    SQSPolicySendEmailBusiness:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sqs:SendMessage"
              Resource:
                Fn::GetAtt:
                  - SQSSendEmailBusiness
                  - Arn
              Principal: "*"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    - Ref: TOPICTriggerBusiness
        Queues:
          - "${self:provider.environment.TOPIC_SEND_EMAIL_BUSINESS_NAME}"

  Outputs:
    SQSSendEmailBusinessArn:
      Value:
        Fn::GetAtt:
          - SQSSendEmailBusiness
          - Arn
    SQSSendEmailBusinessUrl:
      Value:
        Ref: SQSSendEmailBusiness
    SQSSendEmailBusinessName:
      Value:
        Fn::GetAtt:
          - SQSSendEmailBusiness
          - QueueName

    TOPICTriggerBusinessArn:
      Value:
        Ref: TOPICTriggerBusiness

    SQSOpenseSyncArn:
      Value:
        Fn::GetAtt:
          - SQSOpenseSync
          - Arn
    SQSOpenseSyncArnUrl:
      Value:
        Ref: SQSOpenseSync
    SQSOpenseSyncName:
      Value:
        Fn::GetAtt:
          - SQSOpenseSync
          - QueueName

    TOPICOpenseSyncArn:
      Value:
        Ref: TopicOpenseSync
