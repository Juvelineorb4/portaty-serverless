service: portatyv2
app: portaty-professions
org: juvelineorb4

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    "SQS_OPENSE_NAME": "${self:custom.sqs_opense_name.${opt:stage, self:provider.stage}}"
    "SQS_DLQ_NAME": "${self:custom.sqs_dlq_name.${opt:stage, self:provider.stage}}"
    "TOPIC_OPENSE_NAME": "${self:custom.topic_opense_name.${opt:stage, self:provider.stage}}"
    "TOPIC_SEND_EMAIL_BUSINESS_NAME": "${self:custom.sqs_email_business_name.${opt:stage, self:provider.stage}}"
    "TOPIC_TRIGGER_BUSINESS": "${self:custom.topic_trigger_business.${opt:stage, self:provider.stage}}"
    "SNS_TOPIC_ARN": ${cf:portatyv2-${self:provider.stage}.TOPICTriggerBusinessArn}
    "SNS_TOPIC_OPENSEARCH_ARN": ${cf:portatyv2-${self:provider.stage}.TOPICOpenseSyncArn}
    "OPENSEARCH_ARN": "arn:aws:es:us-east-1:086563672363:domain/portaty-opense"
    "OPENSEARCH_ENDPOINT": "https://search-portaty-opense-f2pru5qxiz73a53c7fstafplnu.us-east-1.es.amazonaws.com"
    "OPENSEARCH_REGION": "us-east-1"
    "OPENSE_INDEX": "${self:custom.opense_index.${opt:stage, self:provider.stage}}"
    "TABLE_BUSINESS_STREAM": "${self:custom.table_business_stream.${opt:stage, self:provider.stage}}"
    "QUEUE_USERS_NAME": "${self:custom.queue_users_name.${opt:stage, self:provider.stage}}"
    "QUEUE_DLQ_USERS_NAME": "${self:custom.queue_dlq_users_name.${opt:stage, self:provider.stage}}"
    "TOPIC_TRIGGER_USERS_NAME": "${self:custom.topic_trigger_users_name.${opt:stage, self:provider.stage}}"
    "TOPIC_USERS_OPENSE_ARN":
      Ref: TopicUsersOpenseSync
    "TABLE_USERS_STREAM": "${self:custom.table_users_stream.${opt:stage, self:provider.stage}}"
    "OPENSE_USERS_INDEX": "${self:custom.opense_user_index.${opt:stage, self:provider.stage}}"
    "QUEUE_USERS_CHANGE_LOCATION_NAME": "${self:custom.queue_users_change_location.${opt:stage, self:provider.stage}}"
    "QUEUE_DLQ_USERS_CHANGE_LOCATION_NAME": "${self:custom.queue_dlq_users_change_location.${opt:stage, self:provider.stage}}"
    "TOPIC_USERS_CHANGE_LOCATION_NAME": "${self:custom.topic_users_change_location_name.${opt:stage, self:provider.stage}}"
    "TOPIC_USERS_CHANGE_LOCATION_ARN":
      Ref: TopicUsersChangeLocation
    "QUEUE_USERS_SEND_EMAIL_NAME": "${self:custom.queue_users_send_email.${opt:stage, self:provider.stage}}"
    "QUEUE_DLQ_USERS_SEND_EMAIL_NAME": "${self:custom.queue_dlq_users_send_email.${opt:stage, self:provider.stage}}"
    "TOPIC_USERS_SEND_EMAIL_NAME": "${self:custom.topic_users_send_email_name.${opt:stage, self:provider.stage}}"
    "TOPIC_USERS_SEND_EMAIL_ARN":
      Ref: TopicUsersSendEmail
    "S3_BUCKET_NAME": "${self:custom.s3_bucket_name.${opt:stage, self:provider.stage}}"
    "TOPIC_SEND_NOTIFICATION_NAME": "${self:custom.topic_notification_name.${opt:stage, self:provider.stage}}"
    "QUEUE_PUSH_NOTIFICATION_NAME": "${self:custom.queue_push_notification_name.${opt:stage, self:provider.stage}}"
    "QUEUE_USER_NOTIFICATION_DB_NAME": "${self:custom.queue_user_notification_db_name.${opt:stage, self:provider.stage}}"
    "QUEUE_SEND_EMAIL_NAME": "${self:custom.queue_send_email_name.${opt:stage, self:provider.stage}}"
    "QUEUE_DLQ_PUSH_NOTIFICATION_NAME": "${self:custom.queue_dlq_push_notification_name.${opt:stage, self:provider.stage}}"
    "QUEUE_DLQ_USER_NOTIFICATION_DB_NAME": "${self:custom.queue_dlq_user_notification_db_name.${opt:stage, self:provider.stage}}"
    "QUEUE_DLQ_SEND_EMAIL_NAME": "${self:custom.queue_dlq_send_email_name.${opt:stage, self:provider.stage}}"
    "APPSYNC_URL": "${self:custom.appsync_url.${opt:stage, self:provider.stage}}"
    "APPSYNC_API_KEY": "${self:custom.appsync_key.${opt:stage, self:provider.stage}}"

  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sns:*"
          Resource:
            - Ref: TOPICTriggerBusiness
            - Ref: TopicOpenseSync
            - Ref: TopicUsersOpenseSync
            - Ref: TopicUsersChangeLocation
            - Ref: TopicUsersSendEmail
        - Effect: "Allow"
          Action:
            - "es:*"
          Resource:
            - "${self:provider.environment.OPENSEARCH_ARN}/*"
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "*"
custom:
  opense_index:
    dev: "business_dev"
    prod: "business"
  opense_user_index:
    dev: "users_dev"
    prod: "users"
  table_business_stream:
    dev: "arn:aws:dynamodb:us-east-1:086563672363:table/Business-ehid2xtqobf75gakml3qgdj45m-dev/stream/2023-08-11T20:44:59.902"
    prod: "arn:aws:dynamodb:us-east-1:086563672363:table/Business-3phqsjzznfdxlnjnzszwzb6rjy-prod/stream/2024-04-06T19:25:12.916"
  sqs_opense_name:
    dev: "SQSOpenseSyncdev"
    prod: "SQSOpenseSync"
  sqs_dlq_name:
    dev: "SQSOpenseSyncDLQdev"
    prod: "SQSOpenseSyncDLQ"
  topic_opense_name:
    dev: "TopicOpenseSyncdev"
    prod: "TopicOpenseSync"
  sqs_email_business_name:
    dev: "SQSSendEmailBusinessdev"
    prod: "SQSSendEmailBusiness"
  topic_trigger_business:
    dev: "TOPICTriggerBusinessdev"
    prod: "TOPICTriggerBusiness"
  queue_users_name:
    dev: "QueueUsersdev"
    prod: "QueueUsers"
  queue_dlq_users_name:
    dev: "QueueUsersDLQdev"
    prod: "QueueUsersDLQ"
  topic_trigger_users_name:
    dev: "TopicTriggerUsersdev"
    prod: "TopicTriggerUsers"
  table_users_stream:
    dev: "arn:aws:dynamodb:us-east-1:086563672363:table/Users-ehid2xtqobf75gakml3qgdj45m-dev/stream/2023-08-11T20:43:57.250"
    prod: "arn:aws:dynamodb:us-east-1:086563672363:table/Users-3phqsjzznfdxlnjnzszwzb6rjy-prod/stream/2024-04-06T19:25:12.745"
  queue_users_change_location:
    dev: "QueueUsersChangeLocationdev"
    prod: "QueueUsersChangeLocation"
  queue_dlq_users_change_location:
    dev: "QueueUsersChangeLocationDLQdev"
    prod: "QueueUsersChangeLocationDLQ"
  topic_users_change_location_name:
    dev: "TopicUsersChangeLocationdev"
    prod: "TopicUsersChangeLocation"
  queue_users_send_email:
    dev: "QueueUsersSendEmaildev"
    prod: "QueueUsersSendEmail"
  queue_dlq_users_send_email:
    dev: "QueueUsersSendEmailDLQdev"
    prod: "QueueUsersSendEmailDLQ"
  topic_users_send_email_name:
    dev: "TopicUsersSendEmaildev"
    prod: "TopicUsersSendEmail"
  s3_bucket_name:
    dev: "s3professions202858-dev"
    prod: "s3professions143312-prod"
  topic_notification_name:
    dev: "TopicSendNotificationdev"
    prod: "TopicSendNotificationd"
  queue_push_notification_name:
    dev: "QueuePushNotificationdev"
    prod: "QueuePushNotification"
  queue_user_notification_db_name:
    dev: "QueueUserNotificationdev"
    prod: "QueueUserNotification"
  queue_send_email_name:
    dev: "QueueSendEmaildev"
    prod: "QueueSendEmail"
  queue_dlq_push_notification_name:
    dev: "QueuePushNotificationDLQdev"
    prod: "QueuePushNotificationDLQ"
  queue_dlq_user_notification_db_name:
    dev: "QueueUserNotificationDLQdev"
    prod: "QueueUserNotificationDLQ"
  queue_dlq_send_email_name:
    dev: "QueueSendEmailDLQdev"
    prod: "QueueSendEmailDLQ"
  appsync_url:
    dev: "https://vkrtsagkivgqjgzbnhekkyusfm.appsync-api.us-east-1.amazonaws.com/graphql"
    prod: "https://cq6hw4g7arg4jitnxitbhihhpu.appsync-api.us-east-1.amazonaws.com/graphql"
  appsync_key:
    dev: "da2-2ardlryjrvdl3cqdyrtz2ppq5i"
    prod: "da2-x4g3fxoha5eeroeswkza7fznny"

functions:
  test:
    handler: handler.hello
    events:
      - http:
          path: test
          method: get
  triggerBusiness:
    handler: functions/triggerBusiness.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:provider.environment.TABLE_BUSINESS_STREAM}
  sendEmailBusiness:
    handler: functions/sendEmailBusiness.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSSendEmailBusiness
              - Arn
  openSearchBusinessSync:
    handler: functions/openSearchBusinessSync.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSOpenseSync
              - Arn
    layers:
      - arn:aws:lambda:us-east-1:086563672363:layer:openSearchBusinessSync:3
    timeout: 30
  triggerUsers:
    handler: functions/triggerUsers.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:provider.environment.TABLE_USERS_STREAM}
  openseUsersSync:
    handler: functions/openseUsersSync.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueUsersOpenseSync
              - Arn
    layers:
      - arn:aws:lambda:us-east-1:086563672363:layer:openSearchBusinessSync:3
    timeout: 30
  sendEmailUser:
    handler: functions/sendEmailUser.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueUsersSendEmail
              - Arn
  sendEmail:
    handler: functions/sendEmail.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueSendEmail
              - Arn
  userNotificationDB:
    handler: functions/userNotificationDB.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueueUserNotificationDB
              - Arn
    layers:
      - arn:aws:lambda:us-east-1:086563672363:layer:openSearchBusinessSync:3
  sendPushNotification:
    handler: functions/sendPushNotification.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - QueuePushNotification
              - Arn
    layers:
      - arn:aws:lambda:us-east-1:086563672363:layer:openSearchBusinessSync:3

resources:
  Resources:
    # ***********OPENSE SYNC BUSINESS************
    # SQS
    SQSOpenseSync:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.SQS_OPENSE_NAME}.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - SQSOpenseSyncDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    SQSOpenseSyncDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.SQS_DLQ_NAME}.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
    # SNS
    TopicOpenseSync:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "${self:provider.environment.TOPIC_OPENSE_NAME}.fifo"
        FifoTopic: true
        ContentBasedDeduplication: true
    # # SUBSCRIOTION SQS
    SQSOpenseSyncSubs:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn:
          Fn::Join:
            - ":"
            - - "arn:aws:sns"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "${self:provider.environment.TOPIC_OPENSE_NAME}.fifo"
        Endpoint:
          Fn::GetAtt:
            - SQSOpenseSync
            - Arn
        Protocol: sqs
        RawMessageDelivery: true

    # # Policy SNS
    # # Policy SNS
    TopicToSQSOpenseSyncPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: "Allow"
              Principal:
                Service:
                  - "sns.amazonaws.com"
              Resource:
                Fn::GetAtt:
                  - SQSOpenseSync
                  - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: TopicOpenseSync
        Queues:
          - "${self:provider.environment.SQS_OPENSE_NAME}.fifo"
    # # ***************SEND EMAIL*********************
    # # SQS
    SQSSendEmailBusiness:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "${self:provider.environment.TOPIC_SEND_EMAIL_BUSINESS_NAME}"
    # # TOPIC
    TOPICTriggerBusiness:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "${self:provider.environment.TOPIC_TRIGGER_BUSINESS}"
        Subscription:
          - Protocol: sqs
            Endpoint:
              Fn::GetAtt:
                - SQSSendEmailBusiness
                - Arn
    # # POLICY
    SQSPolicySendEmailBusiness:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sqs:SendMessage"
              Resource:
                Fn::GetAtt:
                  - SQSSendEmailBusiness
                  - Arn
              Principal: "*"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    - Ref: TOPICTriggerBusiness
        Queues:
          - "${self:provider.environment.TOPIC_SEND_EMAIL_BUSINESS_NAME}"
    # ***********OPENSE SYNC USER************
    # SQS
    QueueUsersOpenseSync:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_USERS_NAME}.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - QueueUsersOpenseSyncDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    QueueUsersOpenseSyncDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_DLQ_USERS_NAME}.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true
      # SNS
    TopicUsersOpenseSync:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "${self:provider.environment.TOPIC_TRIGGER_USERS_NAME}.fifo"
        FifoTopic: true
        ContentBasedDeduplication: true
    # # SUBSCRIOTION SQS
    QueueUsersOpenseSyncSubs:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn:
          Fn::Join:
            - ":"
            - - "arn:aws:sns"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "${self:provider.environment.TOPIC_TRIGGER_USERS_NAME}.fifo"
        Endpoint:
          Fn::GetAtt:
            - QueueUsersOpenseSync
            - Arn
        Protocol: sqs
        RawMessageDelivery: true
    # # Policy SNS
    TopicToQueueUsersOpenseSyncPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: "Allow"
              Principal:
                Service:
                  - "sns.amazonaws.com"
              Resource:
                Fn::GetAtt:
                  - QueueUsersOpenseSync
                  - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: TopicUsersOpenseSync
        Queues:
          - "${self:provider.environment.QUEUE_USERS_NAME}.fifo"
    # FANOUT PARA CUANDO CAMBIA EL LOCATION DE UN USUARIO
    # SQS
    QueueUsersChangeLocation:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_USERS_CHANGE_LOCATION_NAME}"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - QueueUsersChangeLocationsDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    QueueUsersChangeLocationsDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName:
          "${self:provider.environment.QUEUE_DLQ_USERS_CHANGE_LOCATION_NAME}"
          # # TOPIC
    TopicUsersChangeLocation:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "${self:provider.environment.TOPIC_USERS_CHANGE_LOCATION_NAME}"
        Subscription:
          - Protocol: sqs
            Endpoint:
              Fn::GetAtt:
                - QueueUsersChangeLocation
                - Arn
    # # POLICY
    QueuePolicyUsersChangeLocation:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sqs:SendMessage"
              Resource:
                Fn::GetAtt:
                  - QueueUsersChangeLocation
                  - Arn
              Principal: "*"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    - Ref: TopicUsersChangeLocation
        Queues:
          - "${self:provider.environment.QUEUE_USERS_CHANGE_LOCATION_NAME}"

    # FANOUT PARA CUANDO CAMBIA EL LOCATION DE UN USUARIO
    # SQS
    QueueUsersSendEmail:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_USERS_SEND_EMAIL_NAME}"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - QueueUsersSendEmailDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    QueueUsersSendEmailDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName:
          "${self:provider.environment.QUEUE_DLQ_USERS_SEND_EMAIL_NAME}"
          # # TOPIC
    TopicUsersSendEmail:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "${self:provider.environment.TOPIC_USERS_SEND_EMAIL_NAME}"
        Subscription:
          - Protocol: sqs
            Endpoint:
              Fn::GetAtt:
                - QueueUsersSendEmail
                - Arn
    # # POLICY
    QueuePolicyUsersSendEmail:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sqs:SendMessage"
              Resource:
                Fn::GetAtt:
                  - QueueUsersSendEmail
                  - Arn
              Principal: "*"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    - Ref: TopicUsersSendEmail
        Queues:
          - "${self:provider.environment.QUEUE_USERS_SEND_EMAIL_NAME}"

    # crea un sns unico para envios de notificaciones o email o ambos
    #SQS
    # #SEND PUSH NOTIFICATION
    QueuePushNotification:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_PUSH_NOTIFICATION_NAME}"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - QueueSendEmailDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    QueuePushNotificationDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_DLQ_PUSH_NOTIFICATION_NAME}"

    # #SEND USER NOTIFICATION DB
    QueueUserNotificationDB:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_USER_NOTIFICATION_DB_NAME}"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - QueueSendEmailDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    QueueUserNotificationDBDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_DLQ_USER_NOTIFICATION_DB_NAME}"

    # #SEND EMAIL
    QueueSendEmail:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_SEND_EMAIL_NAME}"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - QueueSendEmailDLQ
              - Arn
          maxReceiveCount: 3
    # DLQ
    QueueSendEmailDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.environment.QUEUE_DLQ_SEND_EMAIL_NAME}"

    # #TOPIC
    TopicSendNotification:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "${self:provider.environment.TOPIC_SEND_NOTIFICATION_NAME}"

    # # politica para que el sns notification pueda enviar a sus respectivas colcas
    QueuePolicyNotification:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sqs:SendMessage"
              Resource:
                - Fn::GetAtt:
                    - QueueSendEmail
                    - Arn
                - Fn::GetAtt:
                    - QueueUserNotificationDB
                    - Arn
                - Fn::GetAtt:
                    - QueuePushNotification
                    - Arn
              Principal:
                Service: "sns.amazonaws.com"
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: TopicSendNotification
        Queues:
          - "${self:provider.environment.QUEUE_SEND_EMAIL_NAME}"
          - "${self:provider.environment.QUEUE_USER_NOTIFICATION_DB_NAME}"
          - "${self:provider.environment.QUEUE_PUSH_NOTIFICATION_NAME}"
    # Suscripción de SQS para correos electrónicos con filtro de canal
    QueueSendEmailSubs:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: TopicSendNotification
        Endpoint:
          Fn::GetAtt:
            - QueueSendEmail
            - Arn
        Protocol: sqs
        RawMessageDelivery: true
        FilterPolicy:
          channel:
            - email # Solo los mensajes con "channel": "email" se enviarán a esta cola

    # Suscripción de SQS para la base de datos de notificaciones de usuario con filtro de canal
    QueueUserNotificationDBSubs:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: TopicSendNotification
        Endpoint:
          Fn::GetAtt:
            - QueueUserNotificationDB
            - Arn
        Protocol: sqs
        RawMessageDelivery: true
        FilterPolicy:
          channel:
            - user_notification # Solo los mensajes con "channel": "user_notification" se enviarán a esta cola

    # Suscripción de SQS para notificaciones push con filtro de canal
    QueuePushNotificationSubs:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: TopicSendNotification
        Endpoint:
          Fn::GetAtt:
            - QueuePushNotification
            - Arn
        Protocol: sqs
        RawMessageDelivery: true
        FilterPolicy:
          channel:
            - push_notification # Solo los mensajes con "channel": "push_notification" se enviarán a esta cola

  Outputs:
    SQSSendEmailBusinessArn:
      Value:
        Fn::GetAtt:
          - SQSSendEmailBusiness
          - Arn
    SQSSendEmailBusinessUrl:
      Value:
        Ref: SQSSendEmailBusiness
    SQSSendEmailBusinessName:
      Value:
        Fn::GetAtt:
          - SQSSendEmailBusiness
          - QueueName

    TOPICTriggerBusinessArn:
      Value:
        Ref: TOPICTriggerBusiness

    SQSOpenseSyncArn:
      Value:
        Fn::GetAtt:
          - SQSOpenseSync
          - Arn
    SQSOpenseSyncArnUrl:
      Value:
        Ref: SQSOpenseSync
    SQSOpenseSyncName:
      Value:
        Fn::GetAtt:
          - SQSOpenseSync
          - QueueName

    TOPICOpenseSyncArn:
      Value:
        Ref: TopicOpenseSync
    QueueUsersChangeLocation:
      Value:
        Fn::GetAtt:
          - QueueUsersChangeLocation
          - Arn

      # Output para QueueSendEmail

    # # Output para QueueUserNotificationDB
    # QueueUserNotificationDBArn:
    #   Value:
    #     Fn::GetAtt:
    #       - QueueUserNotificationDB
    #       - Arn

    # # Output para QueuePushNotification
    # QueuePushNotificationArn:
    #   Value:
    #     Fn::GetAtt:
    #       - QueuePushNotification
    #       - Arn

    # # Output para el TopicSendNotification (SNS Topic)
    TopicSendNotificationArn:
      Value:
        Ref: TopicSendNotification
